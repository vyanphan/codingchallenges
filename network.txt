- router (connected to modem - mod/demod if ISP analog)
	1. gets packet
	2. packet destination for (some IP)
	3. forward packet to that IP
- DNS
	1. enter URL
	2. DNS Cache 1: is this in cache? no?
		higher level DNS: is this in cache? no?
			...etc.
	3. Found the lookup! Translate to IP addr and cache
	Some attacks
		poison cache so it maps to another IP addr
		change valid time so evil IP is stuck in cache forever
- load balance
	round robin
	least connections
	IP hashing
- firewall
	packet filtering


API Security Attacks
1. Basics
	- HTTP instead of HTTPS
	- Input validation
2. Insecure direct object reference
	- predictable identifiers (enumeration attack)
	- checking authentication status but not which user is authenticated
3. Mishandling client side data
	- client data should be untrusted by default
	- forgetting integrity checks
	- confidentiality of data
4. JWT tokens (signing and encryption)
	- forgetting to check integrity when decoding
	- some .decode() libraries don't throw integrity exceptions, use the right one
	- shared secret for token signing leaving the backend (use public key!)
5. Not propagating identity information
6. Cookies (beware of CSRF)
	- configure security flags correctly
	- cookie prefixes
7. Custom Headers
	- careful when attaching header to outgoing requests
	- harder to use for web apps (CORS, SSE, WebSockets, DocObjModel elements)
	- do not suffer from CSRF
8. Cross Origin Resource Sharing (CORS)
	- CSRF: hidden form tokens
	- CORS: nontraditional HTTP requests (only allowed if on server whitelist)
